# SPDX-FileCopyrightText: 2023-2024 City of Espoo
#
# SPDX-License-Identifier: LGPL-2.1-or-later

name: Build
on:
  push:
  schedule:
    - cron: "0 1 * * 1" # At 01:00 on Monday
env:
  ACR_REGISTRY_NAME: ovacr1337
  DOCKER_PULL: "${{ github.ref == 'refs/heads/master' && 'true' || 'false' }}"
  APP_FQDN: "tampere.alatvala.fi"
  AZURE_RESOURCE_GROUP: "oppivelvollisuus-stack-rg"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  lint-shell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: espoon-voltti/voltti-actions/shellcheck@master

  check-licenses:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Reuse Compliance Check
        uses: fsfe/reuse-action@v5

  cache-bust:
    runs-on: ubuntu-latest
    steps:
      - name: "Cache bust"
        id: cache-bust
        run: echo "cache-bust=$(date '+%Y-W%V')" >> "$GITHUB_OUTPUT"
    outputs:
      cache-bust: ${{ steps.cache-bust.outputs.cache-bust }}

  dockerize:
    runs-on: ubuntu-latest
    needs:
      - cache-bust
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: oppivelvollisuus/frontend
            path: frontend
          - name: oppivelvollisuus/api-gateway
            path: api-gateway

    steps:
      - uses: actions/checkout@v4

      - name: Build image
        uses: VonLatvala/voltti-actions/docker-build-push-azure@master
        id: build
        with:
          path: ${{ matrix.path }}
          pull: ${{ env.DOCKER_PULL }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          ACR_USER: ${{ secrets.GHA_ACR_USER }}
          ACR_PASS: ${{ secrets.GHA_ACR_PASS }}
          registry: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          name: ${{ matrix.name }}
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}

      - name: Build and run unit tests
        uses: VonLatvala/voltti-actions/docker-build-push-azure@master
        id: test
        with:
          path: ${{ matrix.path }}
          pull: ${{ env.DOCKER_PULL }}
          push: false
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          ACR_USER: ${{ secrets.GHA_ACR_USER }}
          ACR_PASS: ${{ secrets.GHA_ACR_PASS }}
          registry: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          name: ${{ matrix.name }}-test
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}
          target: test

  service:
    runs-on: ubuntu-latest
    needs:
      - cache-bust
    env:
      name: oppivelvollisuus/service
      path: service
      builder: builder

    steps:
      - uses: actions/checkout@v4

      - name: Build image
        uses: VonLatvala/voltti-actions/docker-build-push-azure@master
        id: build
        with:
          path: ${{ env.path }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          ACR_USER: ${{ secrets.GHA_ACR_USER }}
          ACR_PASS: ${{ secrets.GHA_ACR_PASS }}
          registry: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          name: ${{ env.name }}
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}

      - name: Build builder
        uses: VonLatvala/voltti-actions/docker-build-push-azure@master
        id: builder
        with:
          path: ${{ env.path }}
          pull: ${{ env.DOCKER_PULL }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          ACR_USER: ${{ secrets.GHA_ACR_USER }}
          ACR_PASS: ${{ secrets.GHA_ACR_PASS }}
          registry: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          name: ${{ env.name }}-${{ env.builder }}
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}
          target: ${{ env.builder }}
    outputs:
      image: ${{ steps.build.outputs.image }}
      image_name: ${{ steps.build.outputs.image_name }}
      builder_image: ${{ steps.builder.outputs.image }}
      builder_image_name: ${{ steps.builder.outputs.image_name }}

  frontend:
    runs-on: ubuntu-latest
    needs:
      - cache-bust
    env:
      name: oppivelvollisuus/frontend
      path: frontend
      builder: builder
    steps:
      - uses: actions/checkout@v4

      - name: Build builder
        uses: VonLatvala/voltti-actions/docker-build-push-azure@master
        id: builder
        with:
          path: ${{ env.path }}
          dockerfile: frontend/Dockerfile.dev
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          ACR_USER: ${{ secrets.GHA_ACR_USER }}
          ACR_PASS: ${{ secrets.GHA_ACR_PASS }}
          registry: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          name: ${{ env.name }}-${{ env.builder }}
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}
    outputs:
      builder_image: ${{ steps.builder.outputs.image }}
      builder_image_name: ${{ steps.builder.outputs.image_name }}

  owasp:
    if: ${{ github.actor != 'dependabot[bot]' && false }} # TODO: Enable
    needs:
      - service
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.GHA_ACR_USER }}
          password: ${{ secrets.GHA_ACR_PASS }}

      - name: Cache dependency check database
        uses: actions/cache@v4
        with:
          path: dependency-check-data
          key: dependency-check-data-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            dependency-check-data-

      - name: Run service OWASP tests
        shell: bash
        run: |
          docker run --rm \
              -e NVD_API_KEY=${{ secrets.NVD_API_KEY }} \
              -v $(pwd)/dependency-check-data:/root/.gradle/dependency-check-data \
              ${{ needs.service.outputs.builder_image }} \
              sh -c "./gradlew --no-daemon dependencyCheckUpdate && ./gradlew --no-daemon dependencyCheckAnalyze"

      - name: Force caching dependency-check-data # If job fails cache is not saved without this
        uses: actions/cache/save@v4
        if: failure()
        with:
          path: dependency-check-data
          key: dependency-check-data-${{ github.run_id }}-${{ github.run_attempt }}

  test:
    runs-on: ubuntu-latest
    needs: service
    env:
      BUILD: "false"
      TAG: "${{ github.event.pull_request.head.sha || github.sha }}"
      REGISTRY_FQDN: "ovacr1337.azurecr.io" # TODO: Put in variables

    defaults:
      run:
        working-directory: compose

    steps:
      - uses: actions/checkout@v4

      - name: Login to ACR
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.GHA_ACR_USER }}
          password: ${{ secrets.GHA_ACR_PASS }}

      - name: Pull images
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: |
          ./test-compose pull

      - name: Build images
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        run: |
          ./test-compose build --parallel

      - name: Run tests
        run: |
          set -o pipefail
          ./test-compose run service-tests | tee tests.log

      - name: Get logs
        if: always()
        run: |
          ./test-compose logs > tests-all.log

      - name: Store logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            compose/tests.log
            compose/tests-all.log
          retention-days: 2

  e2e-test:
    runs-on: ubuntu-latest
    needs:
      - service
      - dockerize
    env:
      BUILD: "false"
      TAG: "${{ github.event.pull_request.head.sha || github.sha }}"
      REGISTRY_FQDN: "ovacr1337.azurecr.io" # TODO: Put in variables

    defaults:
      run:
        working-directory: compose

    steps:
      - uses: actions/checkout@v4

      - name: Login to ACR
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.GHA_ACR_USER }}
          password: ${{ secrets.GHA_ACR_PASS }}

      - name: Pull images
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: |
          ./e2e-test-compose pull

      - name: Build images
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        run: |
          ./e2e-test-compose build --parallel

      - name: Start dependencies
        run: |
          ./e2e-test-compose up -d oppivelvollisuus-db redis frontend api-gateway

      - name: Run e2e tests
        run: |
          set -o pipefail
          ./e2e-test-compose up --exit-code-from service-e2e-tests service-e2e-tests | tee tests.log

      - name: Get logs
        if: always()
        run: |
          ./e2e-test-compose logs > tests-all.log

      - name: Store logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            compose/tests.log
            compose/tests-all.log
          retention-days: 2

  deploy:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs:
      - test
      - e2e-test
      - dockerize
      - frontend
    strategy:
      fail-fast: false
      matrix:
        environment:
          - staging
          - prod
    environment:
      name: ${{ matrix.environment }}

    steps:
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Create GitHub Deployment
      #   id: deployment
      #   uses: actions/create-deployment@v1
      #   with:
      #     environment: ${{ matrix.environment }}
      #     ref: ${{ github.sha }}
      #     transient_environment: false
      #     auto_merge: false

      - name: Retag
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            for repository in service api-gateway frontend; do
              MANIFEST=$(az acr manifest list-metadata --registry "${{ env.ACR_REGISTRY_NAME }}" --name "oppivelvollisuus/${repository}" --query "[?tags[?@==\`${{ github.event.pull_request.head.sha || github.sha }}\`]].digest | [0]" -o tsv)
              az acr import --name "${{ env.ACR_REGISTRY_NAME }}" --source "${{ env.ACR_REGISTRY_NAME }}.azurecr.io/oppivelvollisuus/${repository}@${MANIFEST}" --image "oppivelvollisuus/${repository}:env-${{ matrix.environment }}" --force
            done

      # - name: Push new frontend code
      #   shell: bash
      #   run: |
      #     docker run --rm \
      #         -e TENANT=TAMPERE \
      #         -v $(pwd):/app \
      #         ${{ needs.frontend.outputs.builder_image }} \
      #         yarn && yarn install && yarn build && yarn exec swa deploy --env production

      - name: Update Azure Container App image
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            for app in api-gateway backend; do
              az containerapp update \
                --name "${app}-service" \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --image "${{ env.ACR_REGISTRY_NAME }}.azurecr.io/oppivelvollisuus/${app}:env-${{ matrix.environment }}" &
            done
            wait $(jobs -p)

      # - name: Set Deployment Status to success
      #   uses: actions/deployment-status@v1
      #   if: ${{ success() }}
      #   with:
      #     deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      #     state: success
      #     environment_url: ${{ matrix.environment == 'prod' && 'https://${{ env.APP_FQDN }}' || 'https://staging.${{ env.APP_FQDN }}' }}

      # - name: Set Deployment Status to failure
      #   uses: actions/deployment-status@v1
      #   if: ${{ failure() }}
      #   with:
      #     deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      #     state: failure

      - name: Deploy
        if: false
        run: |
          aws ecs update-service \
            --cluster "oppivelvollisuus-${{ matrix.environment }}" \
            --service "oppivelvollisuus-${{ matrix.environment }}" \
            --force-new-deployment
          aws ecs wait services-stable \
            --cluster "oppivelvollisuus-${{ matrix.environment }}" \
            --services "oppivelvollisuus-${{ matrix.environment }}"
